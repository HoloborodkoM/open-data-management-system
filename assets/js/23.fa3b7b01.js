(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{667:function(n,e,a){"use strict";a.r(e);var t=a(34),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[n._v("#")]),n._v(" Реалізація інформаційного та програмного забезпечення")]),n._v(" "),a("p",[a("b",[n._v("В рамках проекту розробляється:")])]),n._v(" "),a("h2",{attrs:{id:"sql-скрипт"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт"}},[n._v("#")]),n._v(" SQL скрипт")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema OpenDataManagementSystem\n-- -----------------------------------------------------\nDROP SCHEMA IF EXISTS `OpenDataManagementSystem` ;\n\n-- -----------------------------------------------------\n-- Schema OpenDataManagementSystem\n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `OpenDataManagementSystem` DEFAULT CHARACTER SET utf8 ;\nUSE `OpenDataManagementSystem` ;\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`donate`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`donate` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`donate` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `card` VARCHAR(45) NULL,\n  `owner` VARCHAR(45) NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`role`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`role` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`role` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(20) NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`user`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`user` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`user` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(20) NULL,\n  `email` VARCHAR(45) NULL,\n  `password` VARCHAR(45) NULL,\n  `avatar` VARCHAR(100) NULL,\n  `donate_id` INT NOT NULL,\n  `role_id` INT NOT NULL,\n  PRIMARY KEY (`id`, `donate_id`, `role_id`),\n  INDEX `fk_User_Donate_idx` (`donate_id` ASC) VISIBLE,\n  INDEX `fk_user_role1_idx` (`role_id` ASC) VISIBLE,\n  CONSTRAINT `fk_ref_Donate`\n    FOREIGN KEY (`donate_id`)\n    REFERENCES `OpenDataManagementSystem`.`donate` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_user_role1`\n    FOREIGN KEY (`role_id`)\n    REFERENCES `OpenDataManagementSystem`.`role` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`category`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`category` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`category` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(30) NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`dataFile`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`dataFile` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`dataFile` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(45) NULL,\n  `description` VARCHAR(200) NULL,\n  `file_csv` VARCHAR(45) NULL,\n  `uploadDate` DATETIME NULL,\n  `hasGraph` TINYINT NULL,\n  `category_id` INT NOT NULL,\n  PRIMARY KEY (`id`, `category_id`),\n  INDEX `fk_dataFile_category1_idx` (`category_id` ASC) VISIBLE,\n  CONSTRAINT `fk_dataFile_category1`\n    FOREIGN KEY (`category_id`)\n    REFERENCES `OpenDataManagementSystem`.`category` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`fileCollection`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`fileCollection` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`fileCollection` (\n  `user_id` INT NOT NULL,\n  `dataFile_id` INT NOT NULL,\n  PRIMARY KEY (`user_id`, `dataFile_id`),\n  INDEX `fk_fileCollection_dataFile1_idx` (`dataFile_id` ASC) VISIBLE,\n  CONSTRAINT `fk_fileCollection_user1`\n    FOREIGN KEY (`user_id`)\n    REFERENCES `OpenDataManagementSystem`.`user` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_fileCollection_dataFile1`\n    FOREIGN KEY (`dataFile_id`)\n    REFERENCES `OpenDataManagementSystem`.`dataFile` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`editForm`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`editForm` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`editForm` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `editorUserame` VARCHAR(20) NULL,\n  `oldFile_csv` VARCHAR(100) NULL,\n  `newFile_csv` VARCHAR(100) NULL,\n  `editDate` DATETIME NULL,\n  `dataFile_id` INT NOT NULL,\n  `dataFile_category_id` INT NOT NULL,\n  PRIMARY KEY (`id`, `dataFile_id`, `dataFile_category_id`),\n  INDEX `fk_editForm_dataFile1_idx` (`dataFile_id` ASC, `dataFile_category_id` ASC) VISIBLE,\n  CONSTRAINT `fk_editForm_dataFile1`\n    FOREIGN KEY (`dataFile_id` , `dataFile_category_id`)\n    REFERENCES `OpenDataManagementSystem`.`dataFile` (`id` , `category_id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`permission`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`permission` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`permission` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(20) NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OpenDataManagementSystem`.`access`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OpenDataManagementSystem`.`access` ;\n\nCREATE TABLE IF NOT EXISTS `OpenDataManagementSystem`.`access` (\n  `role_id` INT NOT NULL,\n  `permission_id` INT NOT NULL,\n  PRIMARY KEY (`role_id`, `permission_id`),\n  INDEX `fk_access_permission1_idx` (`permission_id` ASC) VISIBLE,\n  CONSTRAINT `fk_access_role1`\n    FOREIGN KEY (`role_id`)\n    REFERENCES `OpenDataManagementSystem`.`role` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_access_permission1`\n    FOREIGN KEY (`permission_id`)\n    REFERENCES `OpenDataManagementSystem`.`permission` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n\n-- -----------------------------------------------------\n-- Data for table `OpenDataManagementSystem`.`donate`\n-- -----------------------------------------------------\nSTART TRANSACTION;\nUSE `OpenDataManagementSystem`;\nINSERT INTO `OpenDataManagementSystem`.`donate` (`id`, `card`, `owner`) VALUES (DEFAULT, '4149 4991 3384 6467', 'Yevhenii');\n\nCOMMIT;\n\n\n-- -----------------------------------------------------\n-- Data for table `OpenDataManagementSystem`.`role`\n-- -----------------------------------------------------\nSTART TRANSACTION;\nUSE `OpenDataManagementSystem`;\nINSERT INTO `OpenDataManagementSystem`.`role` (`id`, `name`) VALUES (DEFAULT, 'admin');\n\nCOMMIT;\n\n\n-- -----------------------------------------------------\n-- Data for table `OpenDataManagementSystem`.`user`\n-- -----------------------------------------------------\nSTART TRANSACTION;\nUSE `OpenDataManagementSystem`;\nINSERT INTO `OpenDataManagementSystem`.`user` (`id`, `username`, `email`, `password`, `avatar`, `donate_id`, `role_id`) VALUES (DEFAULT, 'Vasia Pupkin', 'exanple@mail.com', '123', 'image.jpg', 1, 1);\n\nCOMMIT;\n\n\n-- -----------------------------------------------------\n-- Data for table `OpenDataManagementSystem`.`category`\n-- -----------------------------------------------------\nSTART TRANSACTION;\nUSE `OpenDataManagementSystem`;\nINSERT INTO `OpenDataManagementSystem`.`category` (`id`, `name`) VALUES (DEFAULT, 'others');\n\nCOMMIT;\n\n\n-- -----------------------------------------------------\n-- Data for table `OpenDataManagementSystem`.`dataFile`\n-- -----------------------------------------------------\nSTART TRANSACTION;\nUSE `OpenDataManagementSystem`;\nINSERT INTO `OpenDataManagementSystem`.`dataFile` (`id`, `name`, `description`, `file_csv`, `uploadDate`, `hasGraph`, `category_id`) VALUES (DEFAULT, 'title', 'some description', 'namefile.csv', '2023-01-03 12:00:00.000', 1, 1);\n\nCOMMIT;\n\n\n-- -----------------------------------------------------\n-- Data for table `OpenDataManagementSystem`.`permission`\n-- -----------------------------------------------------\nSTART TRANSACTION;\nUSE `OpenDataManagementSystem`;\nINSERT INTO `OpenDataManagementSystem`.`permission` (`id`, `name`) VALUES (DEFAULT, 'create');\nINSERT INTO `OpenDataManagementSystem`.`permission` (`id`, `name`) VALUES (DEFAULT, 'read');\n\nCOMMIT;\n")])])]),a("h2",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[n._v("#")]),n._v(" RESTfull сервіс для управління даними")]),n._v(" "),a("h3",{attrs:{id:"під-єднання-до-сервера"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#під-єднання-до-сервера"}},[n._v("#")]),n._v(" Під'єднання до сервера")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst port = 4000;\n\nconst app = express();\napp.use(bodyParser.text());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use('/datafile', require('./routes'));\n\napp.listen(port, () => {\n    console.log(`Server started on http://localhost:${port}`);\n});\n")])])]),a("h3",{attrs:{id:"обробник-маршрутів"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#обробник-маршрутів"}},[n._v("#")]),n._v(" Обробник маршрутів")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const { Router, query } = require(\"express\");\nconst mysql = require('mysql2/promise');\nconst { extend } = require('lodash');\n\nconst connectionUrl = 'mysql://root:@localhost:3306/opendatamanagementsystem';\n\nconst sql = {\n    createDataFile: `INSERT INTO DATAFILE(ID, NAME, DESCRIPTION, FILE_CSV, UPLOADDATE, HASGRAPH, CATEGORY_ID) VALUES (:id, :name, :description, :file_csv, :uploadDate, :hasGraph, :category_id)`,\n    readDataFileByID: `SELECT * FROM DATAFILE WHERE ID= :id`,\n    readDataFiles: `SELECT * FROM DATAFILE`,\n    updateDataFileByID: `UPDATE DATAFILE SET NAME= :name, DESCRIPTION= :description, FILE_CSV= :file_csv, CATEGORY_ID= :category_id WHERE ID= :id`,\n    deleteDataFileByID: `DELETE FROM DATAFILE WHERE ID= :id`,\n};\n\nconst executeSQL = async (query, values) => {\n    let connection;\n    let sqlStatement;\n    try {\n        connection = await mysql.createConnection({\n            uri: connectionUrl,\n            password: 'sX18rzX*4#Lw',\n            namedPlaceholders: true\n        });\n        sqlStatement = await connection.format(query, values);\n\n        const [results, fields] = await connection.execute(sqlStatement);\n        return results;\n    } catch (err) {\n        throw new Error(`SQL: ${sqlStatement} - ${err.toString()}`);\n    } finally {\n        if (connection) connection.end();\n    }\n};\n\nconst router = Router();\n\nrouter.post('/:id', async (req, res) => {\n    try {\n        const values = extend({}, req.body, req.params);\n        console.log(values);\n        console.log(typeof (values));\n        for (const isEmptyField in values) {\n            const informationField = values[isEmptyField];\n            if (informationField === '') {\n               return res.status(404).json(\"Can't be empty fields\");\n            }\n        }\n        let result = await executeSQL(sql.createDataFile, values);\n        result = await executeSQL(sql.readDataFileByID, req.params);\n        res.status(200).send(result);\n    } catch (err) {\n        return res.status(500).send({\n            status: 500,\n            error: err.toString()\n        });\n    }\n});\n\nrouter.get('/', async (req, res) => {\n    try {\n        const result = await executeSQL(sql.readDataFiles);\n        if (result.length === 0) {\n            res.status(404).json('No one file in base');\n        } else {\n            res.status(200).send(result);\n        }\n    } catch (err) {\n        return res.status(500).send(err.toString());\n    }\n});\n\nrouter.get('/:id', async (req, res) => {\n    try {\n        const result = await executeSQL(sql.readDataFileByID, req.params);\n        if (result.length === 0) {\n            res.status(404).json('No such file exists');\n        } else {\n            res.status(200).send(result);\n        }\n    } catch (err) {\n        return res.status(500).send(err.toString());\n    }\n});\n\nrouter.put('/:id', async (req, res) => {\n    try {\n        const values = extend({}, req.body, req.params);\n        for (const isEmptyField in values) {\n            const informationField = values[isEmptyField];\n            if (informationField === '') {\n               return res.status(404).json(\"Can't be empty fields\");\n            }\n        }\n        let result = await executeSQL(sql.updateDataFileByID, values);\n        result = await executeSQL(sql.readDataFileByID, req.params);\n        if (result.length === 0) {\n            res.status(404).json('No such file to change');\n        } else {\n            res.status(200).send(result);\n        }\n    } catch (err) {\n        return res.status(500).send(err.toString());\n    }\n});\n\nrouter.delete('/:id', async (req, res) => {\n    try {\n        const result = await executeSQL(sql.readDataFileByID, req.params);\n        if (result.length === 0) {\n            res.status(404).json(\"File can't be delete, isn't in the database\");\n        } else {\n            res.status(200).send(result);\n        }\n        await executeSQL(sql.deleteDataFileByID, req.params);\n        res.status(200).send(result);\n    } catch (err) {\n        return res.status(500).send(err.toString());\n    }\n});\n\nmodule.exports = router;\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);